@using RlssCandidateDetails.Client.Classes.RenderFragments;
@using RlssCandidateDetails.Client.Classes.Server;
@using RlssCandidateDetails.Client.Components;
@using RlssCandidateDetails.Client.Models;
@using RlssCandidateDetails.Client.Models.Server;
@using RlssCandidateDetails.Client.ViewModels;
@using System.Text.Json
@using RlssCandidateDetails.Client.Models.Server.ResponseData;


@inject HttpClient httpClient;

@page "/NewCandidate";


<PageTitle>New Candidate</PageTitle>

<MainLayoutFragments>
	<HeaderTitle>
		<div>New Candidate</div>
	</HeaderTitle>
</MainLayoutFragments>

<section>
	

	
	<svg style="visibility:hidden; width:0; height:0;">
		 <symbol id="back-arrow" viewBox="0 0 30.76 30.76">
				<path fill="currentColor" d="M30.76,15.38c0,8.49-6.88,15.38-15.38,15.38S0,23.87,0,15.38S6.88,0,15.38,0S30.76,6.88,30.76,15.38z M15.38,2.51
					c-7.11,0-12.87,5.76-12.87,12.87s5.76,12.87,12.87,12.87s12.87-5.76,12.87-12.87S22.48,2.51,15.38,2.51z"/>
				<polygon fill="currentColor" points="23.08,13.83 12.74,13.83 17.59,8.83 13.24,8.83 6.67,15.4 6.69,15.42 6.67,15.44 13.1,21.86 17.38,21.85 
								12.78,17.08 23.08,17.08 "/>
		 </symbol>
	
	</svg>



	<div class="menu-back-container">
		<a href="/candidates">
			<div>
				<svg>
					<title>Back</title>
					<use href="#back-arrow" />
				</svg>
				<span>Back</span>
			</div>	
		</a>
	</div>

	<div class="candidate-details-container">
		<CandidateDetailsComponent @ref="_candidateDeetailsComponent" 
								   CandidateDetailsVm="_CandidateDetailsVM" 
								   OnFormSubmit="CandidateDetailsComponent_OnFormSubmit"
								   SubmitButtonText="Add"/>

		<div class="error-messages-container">
			<!-- Displays any error messages we recieve from the server -->
			@foreach (string anError in this.ErrorMessages)
			{
				<div>
					<span>@anError</span>
				</div>   
			}
		</div>
	</div>
	
</section>

@code {
	// A reference to the CanidateDetailsComponent (form that displays users details to add or edit, in this case we are adding)
	private CandidateDetailsComponent _candidateDeetailsComponent;

	/// <summary>
	/// View model for the CandidateDetailsComponent, this is passed in as a parameter
	/// </summary>
	public CandidateDetailsVM _CandidateDetailsVM = new CandidateDetailsVM();

	public List<string> ErrorMessages = new List<string>();

	/// <summary>
	/// Called from _CandidateDetailsVM when the form is being submited
	/// </summary>
	/// <param name="candiateDetails">The new candidate we want to add to the database</param>
	public async void CandidateDetailsComponent_OnFormSubmit(CandidateDetailsVM candiateDetails)
	{
		ServerResponseSingleCandidate responseData;

		// clear out any previouse server side error messages we may have had
		this.ErrorMessages.Clear();

		// send a request to the server to add the new candidate to the database
		responseData = await this.SendInsertRequestToServer(candiateDetails);

		// were there any errors and candidate was not added to the database
		if(responseData.HasErrors)
		{
			// Display error message if candidate not added.
			foreach (string error in responseData.Errors)
				this.ErrorMessages.Add(error);

			return;	
		}

		// Candidate was added, clear the form details
		this._candidateDeetailsComponent.ClearForm();
		/*
		this._CandidateDetailsVM.FirstName = string.Empty;
		this._CandidateDetailsVM.Surname = string.Empty;
		this._CandidateDetailsVM.SocietyNumber = null;
		*/
	}

	private async Task<ServerResponseSingleCandidate> SendInsertRequestToServer(CandidateDetailsVM candidateDetails)
	{
		/*
		ServerCommunication serverCommunication = new ServerCommunication(this.httpClient);
		Dictionary<string, string> DataToSend = new Dictionary<string, string>();
		ServerResponse serverResponse;

		DataToSend.Add("FirstName", candidateDetails.FirstName);
		DataToSend.Add("Surname", candidateDetails.Surname);
		DataToSend.Add("SocietyNumber", candidateDetails.SocietyNumber.ToString());
		DataToSend.Add("DateOfBirth", "");

		serverResponse = await serverCommunication.SendPostRequestToServer("Candidate/Insert", DataToSend);



		if(serverResponse.StatusCode == System.Net.HttpStatusCode.OK)
		{
			ServerResponseSingleCandidate? responseData = JsonSerializer.Deserialize<ServerResponseSingleCandidate>(serverResponse.ResponseMessage, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		}
		*/
		// copy the details from CandidateDetails into candidate.
		Candidate candidate = new Candidate();
		candidate.FirstName = candidateDetails.FirstName;
		candidate.Surname = candidateDetails.Surname;
		candidate.SocietyNumber = candidateDetails.SocietyNumber.ToString();

		// send off the new candidate details to the server
		CandidateCommunication candidateCommunication = new CandidateCommunication(this.httpClient);
		return await candidateCommunication.InsertCandidate(candidate);

		
	}


}
