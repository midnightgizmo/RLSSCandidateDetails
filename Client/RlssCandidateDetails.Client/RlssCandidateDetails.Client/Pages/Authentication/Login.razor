@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using RlssCandidateDetails.Client.Classes.Authentication
@using RlssCandidateDetails.Client.Classes.Server
@using RlssCandidateDetails.Client.Models
@using RlssCandidateDetails.Client.ViewModels;
@using RlssCandidateDetails.Client.Models.Server.ResponseData;
@using RlssCandidateDetails.JsonWebToken;
@inject HttpClient httpClient;
@inject AppSettings appSettings;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;




<section class="login-page">
	<header>
		
		<div>LOGIN</div>

	</header>

	<EditForm Model="PageVM" class="form" OnValidSubmit="async () => await cmdLogin_Submit()">

		<div class="grid">
			<!-- column one -->
			<div class="columne-one">
				<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 49.53 49.52">
					<path d="M25,49.73c-7.91,0-15.82,0-23.73,0-.93,0-1.06-.31-1-1.12A24.88,24.88,0,0,1,16.52,26.46a1.75,1.75,0,0,1,1.47.1,15.06,15.06,0,0,0,13.88.05,2,2,0,0,1,1.78-.07c8.84,3.53,14,10,15.81,19.31.18.94.15,1.92.29,2.88s-.18,1-1,1C40.83,49.72,32.92,49.73,25,49.73Z" transform="translate(-0.24 -0.24)"/>
					<path d="M25,.24A12.38,12.38,0,1,1,12.6,12.59,12.4,12.4,0,0,1,25,.24Z" transform="translate(-0.24 -0.24)"/>
				</svg>
				<label for="input-username"></label>
			</div>

			<!-- column two -->
			<div class="column-two">
				<input id="input-username" type="text" required @bind-value="PageVM.UserName"/>
				<!-- Place holder Text -->
				<span>Username</span>
				<!-- outline border for when the control is selected -->
				<div class="selected-border"></div>
			</div>
		</div>


		<div class="grid">
			<!-- column one -->
			<div class="columne-one">
				<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37.41 48.74">
					<path d="M24.9,49.37H9.4a2.87,2.87,0,0,1-3.05-2.72c0-.41,0-.83,0-1.24V24.3a10.87,10.87,0,0,1,0-1.14,2.88,2.88,0,0,1,2.87-2.83c.55,0,.68-.19.68-.71a43.39,43.39,0,0,1,.24-6.45A15.09,15.09,0,0,1,40,13.91a36.23,36.23,0,0,1,.12,5.61c0,.6.13.8.78.82A2.86,2.86,0,0,1,43.64,23a11.24,11.24,0,0,1,.06,1.42q0,10.47,0,20.93a5.68,5.68,0,0,1-.29,2.24,2.69,2.69,0,0,1-2.72,1.81ZM25,20.31c2.69,0,5.38,0,8.07,0,.63,0,.82-.17.8-.8-.06-1.45,0-2.91-.09-4.36a8.8,8.8,0,0,0-17.35-1.41c-.46,1.91-.21,3.85-.3,5.77,0,.62.16.81.79.8C19.61,20.29,22.31,20.31,25,20.31ZM25,43H26c1.53,0,2-.44,2-2,0-1.74,0-3.48,0-5.22a2.48,2.48,0,0,1,.47-1.57,4,4,0,0,0-.55-5.2,4.41,4.41,0,0,0-5.42-.38,3.87,3.87,0,0,0-1.28,5A6.39,6.39,0,0,1,22,37.28v2.65C22,42.91,22,43,25,43Z" transform="translate(-6.3 -0.63)"/>
				</svg>
				<label for="input-password"></label>
			</div>

			<!-- column two -->
			<div class="column-two">
				<input id="input-password" type="password" required  @bind-value="PageVM.Password"/>
				<!-- Place holder Text -->
				<span>Password</span>
				<!-- outline border for when the control is selected -->
				<div class="selected-border"></div>
			</div>
		</div>

		<div class="submit-container">
			<button type="submit">Login</button>
		</div>


	</EditForm>

	<footer>

	</footer>
</section>




@code 
{
	public LoginVM PageVM { get; set; } = new LoginVM();
	private bool IsInSubmitState { get; set; } = false;

	public async Task cmdLogin_Submit()
	{
		// if the user has allready clicked the login button
		if (this.IsInSubmitState)
			return;

		// this may not be the first time the login button has been clicked.
		// they may have been presented with some errors.
		// clear this errors to allow for a new submit to take place
		this.ClearLoginErrors();

		AuthenticationCommunication serverCommunication = new AuthenticationCommunication(httpClient,appSettings);
		SereverResponsePlainText responseData;
		// send the login details off to the server to see if they accept them
		responseData = await serverCommunication.Login(this.PageVM.UserName, this.PageVM.Password);

		// check the respons we got back from the server
		switch(responseData.StatusCode)
		{
			case System.Net.HttpStatusCode.OK:

				this.ProcessValidLogin(responseData.ReturnValue);
				break;

			// user provided invalid login details
			case System.Net.HttpStatusCode.Unauthorized:

				this.DisplayInvalidLoginCredentials();
				break;

			// somthing went wrong on the server
			case System.Net.HttpStatusCode.Forbidden:

				this.DisplayInvalidLoginCredentials();
				break;

			// unknown error
			default:

				this.DisplayInvalidLoginCredentials();
				break;
		}




	}

	/// <summary>
	/// Take the base64 json web token from the server and checks its a valid jwt.
	/// Then Stores the base64 jwt in appSettings so it can be accessed through out the lifecycle of
	/// this page.
	/// </summary>
	/// <param name="JsonWebToken">base64 json web token</param>
	private void ProcessValidLogin(string JsonWebToken)
	{
		// convert the base64 string into a json web token object
		JwtParser? jwtParser = JwtParser.ParseJWT(JsonWebToken);

		// if we could not convert the base64 string into a json web token object
		if(jwtParser == null)
		{
			// inform the user somthing has gone wrong
			this.DisplayErrorMessages(new string[] { "Login failed. Server response not invalid" });
			return;
		}

		// if we get this far we have a valid json web token.

		// store the base64 jwt in the appSttings so it can be accessed through out the lifecycle of the web page.
		// We will also need to send the jwt back with every request we make to the server.
		this.appSettings.JsonWebToken = JsonWebToken;


		// we were logged in so lets navigate away from the login page

		// we need to call this to updated the users authentication status. not doing this will make the
		// navigation fail
		(this.AuthenticationStateProvider as CustomAuthStateProvider).ForceAuthenticationStateChangeEvent();

		this.NavigationManager.NavigateTo("/");

		
	}

	private void DisplayInvalidLoginCredentials()
	{
		this.DisplayErrorMessages(new string[] { "Invalid username or password" });
	}


	private void DisplayErrorMessages(string[] errors)
	{

	}

	private void ClearLoginErrors()
	{
		
	}
}
